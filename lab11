DISCRIPTION:-
Grammar Rules (Productions):
productions is a dictionary where each key is a non-terminal symbol, and the value is a list of possible productions (tuples of symbols).

Input String:
The input string "John eats" is split into tokens.
Stack-Based Parsing:
The stack is initialized with the start symbol ('S').
The loop continues until the stack is empty.
For each symbol popped from the stack, the script checks if it is a non-terminal.
If it is a non-terminal, the script looks for a matching production that corresponds to the current token.
If a matching production is found, the right-hand side symbols of the production are pushed onto the stack in reverse order.
If the current symbol is a terminal, it is matched with the current token.
If the symbol matches the token, the token is removed from the token list.
If there is no match or no more tokens, the input string is considered invalid

CODE:-
start_symbol = 'S'
productions = {
    'S': [('NP', 'VP')],
    'NP': [('John',), ('Mary',)],
    'VP': [('eats',), ('sleeps',)]
}
input_str = "John eats"
tokens = input_str.split()
stack = [start_symbol]
while stack:
    current_symbol = stack.pop()
    if current_symbol in productions:
        current_productions = productions[current_symbol]
        for production in current_productions:
            if production[0] == tokens[0]:
                stack.extend(reversed(production[1:]))
                tokens.pop(0)
                break
    elif current_symbol == tokens[0]:
        tokens.pop(0)
    else:
        print("Invalid input string")
        break
else:
    if not tokens:
        print("Input string parsed successfully")
    else:
        print("Invalid input string")

OUTPUT:-
Invalid input string
