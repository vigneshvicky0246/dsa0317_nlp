DISCRIPTION:-

The transitions dictionary defines the state transitions based on the input characters.
The is_match function processes each character in the input string and transitions between states accordingly.
The final state is checked to determine if it matches the desired end state (2 in this case).
The FSM starts at state 0.
If it reads an 'a', it transitions to state 1.
From state 1, if it reads a 'b', it transitions to state 2.
State 2 is the accepting state, indicating that the string ends with "ab".
Any invalid character causes a transition back to state 0.

CODE:-

def is_match(input_string):
    transitions = {
        0: {'a': 1, 'b': 0},
        1: {'a': 1, 'b': 2},
        2: {'a': 1, 'b': 0}
    }
    current_state = 0
    for char in input_string:
        if char in transitions[current_state]:
            current_state = transitions[current_state][char]
        else:
            current_state = 0
    return current_state == 2
test_strings = ["ab", "aab", "aaaab", "abc", "xyzab", "abab", "ba"]
for test_string in test_strings:
    if is_match(test_string):
        print(f"'{test_string}' matches the pattern.")
    else:
        print(f"'{test_string}' does not match the pattern.")


OUTPUT:-

'ab' matches the pattern.
'aab' matches the pattern.
'aaaab' matches the pattern.
'abc' does not match the pattern.
'xyzab' matches the pattern.
'abab' matches the pattern.
'ba' does not match the pattern.
